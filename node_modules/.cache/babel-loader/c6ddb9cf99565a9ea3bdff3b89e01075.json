{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Win11/Programming/Other/ticket-to-ride-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import React from\"react\";import{useSelector}from\"react-redux\";import{ticketToRideData}from\"../../../data/ticket-to-ride-data\";import{selectAllBuiltConnections,selectLocalPlayer}from\"../../../state/players/selector\";import{findPathBetweenCities}from\"../../../util/pathfinder\";import CityMarker from\"./CityMarker\";import ConnectionMarker from\"./ConnectionMarker\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Map(_ref){var chosenCity=_ref.chosenCity,setChosenCity=_ref.setChosenCity,showTicketCities=_ref.showTicketCities;var ticketData=showTicketCities;var localPlayer=useSelector(selectLocalPlayer);var neighbours=Object.values(ticketToRideData.connections).filter(function(connection){return connection.fromCity===chosenCity||connection.toCity===chosenCity;}).map(function(connection){return connection.fromCity===chosenCity?connection.toCity:connection.fromCity;});var allBuiltConnections=useSelector(selectAllBuiltConnections);var builtConnections=localPlayer.builtConnections;var showConnections=[];if(ticketData){var _findPathBetweenCitie=findPathBetweenCities(ticketData.from,builtConnections),pi=_findPathBetweenCitie.pi;var completed=localPlayer.completedTickets.find(function(ticket){return ticket.id+1===+ticketData.id;});if(completed){var city=ticketData.to;while(city!==0&&city!==ticketData.from){var _iterator=_createForOfIteratorHelper(builtConnections),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var connectionId=_step.value;var connection=ticketToRideData.connections[connectionId];if(connection.from===city&&connection.to===pi[city]||connection.to===city&&connection.from===pi[city]){showConnections.push(connectionId);break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}city=pi[city];}}}var connectionElements=[];allBuiltConnections.forEach(function(_ref2){var color=_ref2.color,connections=_ref2.connections;connections.forEach(function(connectionId){var connectionData=Object.values(ticketToRideData.connections)[connectionId-1];connectionElements.push(/*#__PURE__*/_jsx(ConnectionMarker,{color:color,connection:connectionData,ticketShow:showConnections.includes(connectionId)},connectionData.id));});});var cities=Object.values(ticketToRideData.cities).map(function(city){return/*#__PURE__*/_jsx(CityMarker,{city:city,chosenCity:chosenCity,setChosenCity:setChosenCity,active:chosenCity===city.city,neighbour:neighbours.findIndex(function(value){return city.city===value;})!==-1,ticketShow:ticketData&&(ticketData.fromCity===city.city||ticketData.toCity===city.city||showConnections.some(function(c){return Object.values(ticketToRideData.connections)[c-1].fromCity===city.city||Object.values(ticketToRideData.connections)[c-1].toCity===city.city;}))},city.id);});return/*#__PURE__*/_jsx(\"div\",{className:\"px-auto mx-auto\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container position-relative mx-0 px-0\",children:[/*#__PURE__*/_jsx(\"img\",{src:\"map.png\",className:\"map-img\",alt:\"\"}),Object.values(cities),connectionElements]})});}export default Map;","map":{"version":3,"names":["React","useSelector","ticketToRideData","selectAllBuiltConnections","selectLocalPlayer","findPathBetweenCities","CityMarker","ConnectionMarker","Map","chosenCity","setChosenCity","showTicketCities","ticketData","localPlayer","neighbours","Object","values","connections","filter","connection","fromCity","toCity","map","allBuiltConnections","builtConnections","showConnections","from","pi","completed","completedTickets","find","ticket","id","city","to","connectionId","push","connectionElements","forEach","color","connectionData","includes","cities","findIndex","value","some","c"],"sources":["C:/Win11/Programming/Other/ticket-to-ride-app/src/views/game/map/Map.js"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ticketToRideData } from \"../../../data/ticket-to-ride-data\";\r\nimport {\r\n  selectAllBuiltConnections,\r\n  selectLocalPlayer,\r\n} from \"../../../state/players/selector\";\r\nimport { findPathBetweenCities } from \"../../../util/pathfinder\";\r\nimport CityMarker from \"./CityMarker\";\r\nimport ConnectionMarker from \"./ConnectionMarker\";\r\n\r\nfunction Map({ chosenCity, setChosenCity, showTicketCities }) {\r\n  const ticketData = showTicketCities;\r\n  const localPlayer = useSelector(selectLocalPlayer);\r\n  const neighbours = Object.values(ticketToRideData.connections)\r\n    .filter(\r\n      (connection) =>\r\n        connection.fromCity === chosenCity || connection.toCity === chosenCity\r\n    )\r\n    .map((connection) => {\r\n      return connection.fromCity === chosenCity\r\n        ? connection.toCity\r\n        : connection.fromCity;\r\n    });\r\n  const allBuiltConnections = useSelector(selectAllBuiltConnections);\r\n  const builtConnections = localPlayer.builtConnections;\r\n\r\n  const showConnections = [];\r\n  if (ticketData) {\r\n    \r\n    const {pi} = findPathBetweenCities(ticketData.from, builtConnections);\r\n    const completed = localPlayer.completedTickets.find(ticket => (ticket.id+1) === (+ticketData.id));\r\n\r\n    if (completed) {\r\n      let city = ticketData.to;\r\n      while (city !== 0 && city !== ticketData.from) {\r\n        for (let connectionId of builtConnections) {\r\n          const connection = ticketToRideData.connections[connectionId];\r\n          if (\r\n            (connection.from === city && connection.to === pi[city]) ||\r\n            (connection.to === city && connection.from === pi[city])\r\n          ) {\r\n            showConnections.push(connectionId);\r\n            break;\r\n          }\r\n        }\r\n        city = pi[city];\r\n      }\r\n    }\r\n  }\r\n\r\n  const connectionElements = [];\r\n  allBuiltConnections.forEach(({ color, connections }) => {\r\n    connections.forEach((connectionId) => {\r\n      const connectionData = Object.values(ticketToRideData.connections)[\r\n        connectionId - 1\r\n      ];\r\n      connectionElements.push(\r\n        <ConnectionMarker\r\n          key={connectionData.id}\r\n          color={color}\r\n          connection={connectionData}\r\n          ticketShow={showConnections.includes(connectionId)}\r\n        />\r\n      );\r\n    });\r\n  });\r\n\r\n  const cities = Object.values(ticketToRideData.cities).map((city) => (\r\n    <CityMarker\r\n      key={city.id}\r\n      city={city}\r\n      chosenCity={chosenCity}\r\n      setChosenCity={setChosenCity}\r\n      active={chosenCity === city.city}\r\n      neighbour={neighbours.findIndex((value) => city.city === value) !== -1}\r\n      ticketShow={\r\n        ticketData &&\r\n        (ticketData.fromCity === city.city ||\r\n          ticketData.toCity === city.city ||\r\n          showConnections.some(\r\n            (c) =>\r\n              Object.values(ticketToRideData.connections)[c - 1].fromCity ===\r\n                city.city ||\r\n              Object.values(ticketToRideData.connections)[c - 1].toCity ===\r\n                city.city\r\n          ))\r\n      }\r\n    />\r\n  ));\r\n  return (\r\n    <div className=\"px-auto mx-auto\">\r\n      <div className=\"container position-relative mx-0 px-0\">\r\n        <img src=\"map.png\" className=\"map-img\" alt=\"\" />\r\n        {Object.values(cities)}\r\n        {connectionElements}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}