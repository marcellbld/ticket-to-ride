{"ast":null,"code":"import { ticketToRideData } from \"../../data/ticket-to-ride-data\";\nimport { ADD_BUILT_CONNECTION, ADD_COMPLETED_TICKET, ADD_HISTORY, ADD_TICKET, NEXT_PLAYER_TURN, SET_PLAYERS } from \"./actions\";\nconst initialState = [];\nexport function playersReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case SET_PLAYERS:\n      return payload;\n    case NEXT_PLAYER_TURN:\n      return nextTurn(state, payload);\n    case ADD_TICKET:\n      return addTicket(state, payload);\n    case ADD_BUILT_CONNECTION:\n      return addBuiltConnection(state, payload);\n    case ADD_HISTORY:\n      return addHistory(state, payload);\n    case ADD_COMPLETED_TICKET:\n      return addCompletedTicket(state, payload);\n    default:\n      return state;\n  }\n}\nfunction addCompletedTicket(state, payload) {\n  const {\n    playerId,\n    ticket\n  } = payload;\n  const ticketData = Object.values(ticket.long ? ticketToRideData.longDestinations : ticketToRideData.destinations)[ticket.id];\n  return state.map(player => {\n    if (player.id === playerId) {\n      return {\n        ...player,\n        completedTickets: [...player.completedTickets, ticket],\n        points: player.points + +ticketData.value\n      };\n    }\n    return player;\n  });\n}\nfunction nextTurn(state, payload) {\n  const currentPlayerId = payload;\n  return state.map(player => {\n    if (player.id === currentPlayerId) {\n      return {\n        ...player,\n        round: player.round + 1\n      };\n    }\n    return player;\n  });\n}\nfunction addTicket(state, payload) {\n  const {\n    playerId,\n    ticket\n  } = payload;\n  return state.map(player => {\n    if (player.id === playerId) {\n      return {\n        ...player,\n        tickets: [...player.tickets, ticket]\n      };\n    }\n    return player;\n  });\n}\nfunction addHistory(state, payload) {\n  const {\n    playerId,\n    historyElement\n  } = payload;\n  return state.map(player => {\n    if (player.id === playerId) {\n      return {\n        ...player,\n        history: [historyElement, ...player.history].slice(0, 2)\n      };\n    }\n    return player;\n  });\n}\nfunction addBuiltConnection(state, payload) {\n  const {\n    playerId,\n    connectionId\n  } = payload;\n  const connection = Object.values(ticketToRideData.connections)[connectionId - 1];\n  const CONNECTION_VALUES = [1, 2, 4, 7, 0, 15, 21];\n  return state.map(player => {\n    if (player.id === playerId) {\n      return {\n        ...player,\n        points: player.points + CONNECTION_VALUES[connection.elements.length - 1],\n        builtConnections: [...player.builtConnections, connectionId],\n        remainingCars: player.remainingCars - connection.elements.length\n      };\n    }\n    return player;\n  });\n}","map":{"version":3,"names":["ticketToRideData","ADD_BUILT_CONNECTION","ADD_COMPLETED_TICKET","ADD_HISTORY","ADD_TICKET","NEXT_PLAYER_TURN","SET_PLAYERS","initialState","playersReducer","state","action","type","payload","nextTurn","addTicket","addBuiltConnection","addHistory","addCompletedTicket","playerId","ticket","ticketData","Object","values","long","longDestinations","destinations","id","map","player","completedTickets","points","value","currentPlayerId","round","tickets","historyElement","history","slice","connectionId","connection","connections","CONNECTION_VALUES","elements","length","builtConnections","remainingCars"],"sources":["C:/Win11/Programming/Other/ticket-to-ride-app/src/state/players/reducer.js"],"sourcesContent":["import { ticketToRideData } from \"../../data/ticket-to-ride-data\";\r\nimport {\r\n  ADD_BUILT_CONNECTION,\r\n  ADD_COMPLETED_TICKET,\r\n  ADD_HISTORY,\r\n  ADD_TICKET,\r\n  NEXT_PLAYER_TURN,\r\n  SET_PLAYERS,\r\n} from \"./actions\";\r\n\r\nconst initialState = [];\r\n\r\nexport function playersReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_PLAYERS:\r\n      return payload;\r\n    case NEXT_PLAYER_TURN:\r\n      return nextTurn(state, payload);\r\n    case ADD_TICKET:\r\n      return addTicket(state, payload);\r\n    case ADD_BUILT_CONNECTION:\r\n      return addBuiltConnection(state, payload);\r\n    case ADD_HISTORY:\r\n      return addHistory(state, payload);\r\n    case ADD_COMPLETED_TICKET:\r\n      return addCompletedTicket(state, payload);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction addCompletedTicket(state, payload) {\r\n  const { playerId, ticket } = payload;\r\n\r\n  const ticketData = Object.values(\r\n    ticket.long\r\n      ? ticketToRideData.longDestinations\r\n      : ticketToRideData.destinations\r\n  )[ticket.id];\r\n\r\n  return state.map((player) => {\r\n    if (player.id === playerId) {\r\n      return {\r\n        ...player,\r\n        completedTickets: [...player.completedTickets, ticket],\r\n        points: player.points + +ticketData.value,\r\n      };\r\n    }\r\n    return player;\r\n  });\r\n}\r\n\r\nfunction nextTurn(state, payload) {\r\n  const currentPlayerId = payload;\r\n  return state.map((player) => {\r\n    if (player.id === currentPlayerId) {\r\n      return { ...player, round: player.round + 1 };\r\n    }\r\n    return player;\r\n  });\r\n}\r\n\r\nfunction addTicket(state, payload) {\r\n  const { playerId, ticket } = payload;\r\n\r\n  return state.map((player) => {\r\n    if (player.id === playerId) {\r\n      return {\r\n        ...player,\r\n        tickets: [...player.tickets, ticket],\r\n      };\r\n    }\r\n    return player;\r\n  });\r\n}\r\n\r\nfunction addHistory(state, payload) {\r\n  const { playerId, historyElement } = payload;\r\n  return state.map((player) => {\r\n    if (player.id === playerId) {\r\n      return {\r\n        ...player,\r\n        history: [historyElement, ...player.history].slice(0, 2),\r\n      };\r\n    }\r\n    return player;\r\n  });\r\n}\r\n\r\nfunction addBuiltConnection(state, payload) {\r\n  const { playerId, connectionId } = payload;\r\n  const connection = Object.values(ticketToRideData.connections)[\r\n    connectionId - 1\r\n  ];\r\n  const CONNECTION_VALUES = [1, 2, 4, 7, 0, 15, 21];\r\n\r\n  return state.map((player) => {\r\n    if (player.id === playerId) {\r\n      return {\r\n        ...player,\r\n        points:\r\n          player.points + CONNECTION_VALUES[connection.elements.length - 1],\r\n        builtConnections: [...player.builtConnections, connectionId],\r\n        remainingCars: player.remainingCars - connection.elements.length,\r\n      };\r\n    }\r\n    return player;\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}