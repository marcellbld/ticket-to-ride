{"ast":null,"code":"var _jsxFileName = \"C:\\\\Win11\\\\Programming\\\\Other\\\\ticket-to-ride-app\\\\src\\\\views\\\\game\\\\map\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { ticketToRideData } from \"../../../data/ticket-to-ride-data\";\nimport { selectAllBuiltConnections, selectLocalPlayer } from \"../../../state/players/selector\";\nimport { findPathBetweenCities } from \"../../../util/pathfinder\";\nimport CityMarker from \"./CityMarker\";\nimport ConnectionMarker from \"./ConnectionMarker\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Map(_ref) {\n  _s();\n  let {\n    chosenCity,\n    setChosenCity,\n    showTicketCities\n  } = _ref;\n  const ticketData = showTicketCities;\n  const localPlayer = useSelector(selectLocalPlayer);\n  const neighbours = Object.values(ticketToRideData.connections).filter(connection => connection.fromCity === chosenCity || connection.toCity === chosenCity).map(connection => {\n    return connection.fromCity === chosenCity ? connection.toCity : connection.fromCity;\n  });\n  const allBuiltConnections = useSelector(selectAllBuiltConnections);\n  const builtConnections = localPlayer.builtConnections;\n  const showConnections = [];\n  if (ticketData) {\n    const {\n      pi\n    } = findPathBetweenCities(ticketData.from, builtConnections);\n    const completed = localPlayer.completedTickets.find(ticket => ticket.id + 1 === +ticketData.id);\n    if (completed) {\n      let city = ticketData.to;\n      while (city !== 0 && city !== ticketData.from) {\n        for (let connectionId of builtConnections) {\n          const connection = ticketToRideData.connections[connectionId];\n          if (connection.from === city && connection.to === pi[city] || connection.to === city && connection.from === pi[city]) {\n            showConnections.push(connectionId);\n            break;\n          }\n        }\n        city = pi[city];\n      }\n    }\n  }\n  const connectionElements = [];\n  allBuiltConnections.forEach(_ref2 => {\n    let {\n      color,\n      connections\n    } = _ref2;\n    connections.forEach(connectionId => {\n      const connectionData = Object.values(ticketToRideData.connections)[connectionId - 1];\n      connectionElements.push( /*#__PURE__*/_jsxDEV(ConnectionMarker, {\n        color: color,\n        connection: connectionData,\n        ticketShow: showConnections.includes(connectionId)\n      }, connectionData.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this));\n    });\n  });\n  const cities = Object.values(ticketToRideData.cities).map(city => /*#__PURE__*/_jsxDEV(CityMarker, {\n    city: city,\n    chosenCity: chosenCity,\n    setChosenCity: setChosenCity,\n    active: chosenCity === city.city,\n    neighbour: neighbours.findIndex(value => city.city === value) !== -1,\n    ticketShow: ticketData && (ticketData.fromCity === city.city || ticketData.toCity === city.city || showConnections.some(c => Object.values(ticketToRideData.connections)[c - 1].fromCity === city.city || Object.values(ticketToRideData.connections)[c - 1].toCity === city.city))\n  }, city.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"px-auto mx-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container position-relative mx-0 px-0\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"map.png\",\n        className: \"map-img\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), Object.values(cities), connectionElements]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"PUQQgA2HZUb46dC+nKonBwbZ9/g=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useSelector","ticketToRideData","selectAllBuiltConnections","selectLocalPlayer","findPathBetweenCities","CityMarker","ConnectionMarker","Map","chosenCity","setChosenCity","showTicketCities","ticketData","localPlayer","neighbours","Object","values","connections","filter","connection","fromCity","toCity","map","allBuiltConnections","builtConnections","showConnections","pi","from","completed","completedTickets","find","ticket","id","city","to","connectionId","push","connectionElements","forEach","color","connectionData","includes","cities","findIndex","value","some","c"],"sources":["C:/Win11/Programming/Other/ticket-to-ride-app/src/views/game/map/Map.js"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ticketToRideData } from \"../../../data/ticket-to-ride-data\";\r\nimport {\r\n  selectAllBuiltConnections,\r\n  selectLocalPlayer,\r\n} from \"../../../state/players/selector\";\r\nimport { findPathBetweenCities } from \"../../../util/pathfinder\";\r\nimport CityMarker from \"./CityMarker\";\r\nimport ConnectionMarker from \"./ConnectionMarker\";\r\n\r\nfunction Map({ chosenCity, setChosenCity, showTicketCities }) {\r\n  const ticketData = showTicketCities;\r\n  const localPlayer = useSelector(selectLocalPlayer);\r\n  const neighbours = Object.values(ticketToRideData.connections)\r\n    .filter(\r\n      (connection) =>\r\n        connection.fromCity === chosenCity || connection.toCity === chosenCity\r\n    )\r\n    .map((connection) => {\r\n      return connection.fromCity === chosenCity\r\n        ? connection.toCity\r\n        : connection.fromCity;\r\n    });\r\n  const allBuiltConnections = useSelector(selectAllBuiltConnections);\r\n  const builtConnections = localPlayer.builtConnections;\r\n\r\n  const showConnections = [];\r\n  if (ticketData) {\r\n    \r\n    const {pi} = findPathBetweenCities(ticketData.from, builtConnections);\r\n    const completed = localPlayer.completedTickets.find(ticket => (ticket.id+1) === (+ticketData.id));\r\n\r\n    if (completed) {\r\n      let city = ticketData.to;\r\n      while (city !== 0 && city !== ticketData.from) {\r\n        for (let connectionId of builtConnections) {\r\n          const connection = ticketToRideData.connections[connectionId];\r\n          if (\r\n            (connection.from === city && connection.to === pi[city]) ||\r\n            (connection.to === city && connection.from === pi[city])\r\n          ) {\r\n            showConnections.push(connectionId);\r\n            break;\r\n          }\r\n        }\r\n        city = pi[city];\r\n      }\r\n    }\r\n  }\r\n\r\n  const connectionElements = [];\r\n  allBuiltConnections.forEach(({ color, connections }) => {\r\n    connections.forEach((connectionId) => {\r\n      const connectionData = Object.values(ticketToRideData.connections)[\r\n        connectionId - 1\r\n      ];\r\n      connectionElements.push(\r\n        <ConnectionMarker\r\n          key={connectionData.id}\r\n          color={color}\r\n          connection={connectionData}\r\n          ticketShow={showConnections.includes(connectionId)}\r\n        />\r\n      );\r\n    });\r\n  });\r\n\r\n  const cities = Object.values(ticketToRideData.cities).map((city) => (\r\n    <CityMarker\r\n      key={city.id}\r\n      city={city}\r\n      chosenCity={chosenCity}\r\n      setChosenCity={setChosenCity}\r\n      active={chosenCity === city.city}\r\n      neighbour={neighbours.findIndex((value) => city.city === value) !== -1}\r\n      ticketShow={\r\n        ticketData &&\r\n        (ticketData.fromCity === city.city ||\r\n          ticketData.toCity === city.city ||\r\n          showConnections.some(\r\n            (c) =>\r\n              Object.values(ticketToRideData.connections)[c - 1].fromCity ===\r\n                city.city ||\r\n              Object.values(ticketToRideData.connections)[c - 1].toCity ===\r\n                city.city\r\n          ))\r\n      }\r\n    />\r\n  ));\r\n  return (\r\n    <div className=\"px-auto mx-auto\">\r\n      <div className=\"container position-relative mx-0 px-0\">\r\n        <img src=\"map.png\" className=\"map-img\" alt=\"\" />\r\n        {Object.values(cities)}\r\n        {connectionElements}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}