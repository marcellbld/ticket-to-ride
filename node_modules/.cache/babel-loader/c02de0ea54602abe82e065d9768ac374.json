{"ast":null,"code":"var _jsxFileName = \"C:\\\\Win11\\\\Programming\\\\Other\\\\ticket-to-ride-app\\\\src\\\\views\\\\game\\\\GamePage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useState, useRef } from \"react\";\nimport Map from \"./map/Map\";\nimport { ticketToRideData } from \"../../data/ticket-to-ride-data\";\nimport PlayerIndicatorPanel from \"./panel/player-indicator/PlayerIndicatorPanel\";\nimport PublicCardsPanel from \"./panel/public-cards/PublicCardsPanel\";\nimport DeckPanel from \"./panel/deck-panel/DeckPanel\";\nimport TicketDeckPanel from \"./panel/ticket-deck-panel/TicketDeckPanel\";\nimport CurrentPlayerCardsPanel from \"./panel/current-player-cards-panel/CurrentPlayerCardsPanel\";\nimport HistoryPanel from \"./panel/history-panel/HistoryPanel\";\nimport CurrentPlayerTicketPanel from \"./panel/current-player-ticket-panel/CurrentPlayerTicketPanel\";\nimport BuildModal from \"./BuildModal\";\nimport EndGameModal from \"./EndGameModal\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectGame } from \"../../state/game/selector\";\nimport { Colors } from \"../../domain/colors\";\nimport { selectAllBuiltConnections, selectCurrentPlayer, selectLocalPlayer } from \"../../state/players/selector\";\nimport { nextGameTurn, setEndTurn, setGameState } from \"../../state/game/actions\";\nimport { setDeck } from \"../../state/deck/actions\";\nimport { selectLocalPlayerCards } from \"../../state/deck/selector\";\nimport NotificationModal from \"./NotificationModal\";\nimport { GameStates } from \"../../domain/game\";\nimport { wsSubscribeChannel } from \"../../state/socket/actions\";\nimport { GameActionTypes, ServerMessages } from \"../../api/socket\";\nimport { addBuiltConnection, addCompletedTicket, addHistory, addTicket } from \"../../state/players/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction useNotificationModalShow() {\n  _s();\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\n  const changeShowNotificationModal = message => {\n    if (showNotificationModal) return;\n    setTimeout(() => {\n      setShowNotificationModal(false);\n    }, 1000);\n    setNotificationMessage(message);\n    setShowNotificationModal(true);\n  };\n  return {\n    showNotificationModal,\n    notificationMessage,\n    changeShowNotificationModal\n  };\n}\n_s(useNotificationModalShow, \"kimWMM+hMM74QzdGxLQ3cgX058s=\");\nfunction useBuildModalShow() {\n  _s2();\n  const [showBuildModal, setShowBuildModal] = useState(false);\n  const [buildableConnection, setBuildableConnection] = useState(-1);\n  const changeShowBuildModal = (show, connectionId) => {\n    setBuildableConnection(connectionId);\n    setShowBuildModal(show);\n  };\n  return {\n    showBuildModal,\n    buildableConnection,\n    changeShowBuildModal\n  };\n}\n_s2(useBuildModalShow, \"Wb9a7xcWWSaG4JHdc9xzNmTa32Y=\");\nfunction useCurrentTicketShow(localPlayerTickets) {\n  _s3();\n  const [currentTicketShow, setCurrentTicketShow] = useState(0);\n  const id = useRef(0);\n  const changeCurrentTicketShow = changeValue => {\n    id.current += changeValue;\n    if (id.current < 0) {\n      id.current = localPlayerTickets.length - 1;\n    } else if (id.current > localPlayerTickets.length - 1) {\n      id.current = 0;\n    }\n    setCurrentTicketShow(id.current);\n  };\n  return {\n    currentTicketShow,\n    changeCurrentTicketShow\n  };\n}\n_s3(useCurrentTicketShow, \"0kCoy/xyyrefL5SMZUqktCkDPxk=\");\nfunction GamePage(_ref) {\n  _s4();\n  let {\n    setAppState\n  } = _ref;\n  const game = useSelector(selectGame);\n  const currentPlayer = useSelector(selectCurrentPlayer);\n  const localPlayer = useSelector(selectLocalPlayer);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(wsSubscribeChannel(ServerMessages.ACTION_SENT, resp => {\n      const payload = resp.action.payload;\n      switch (resp.action.type) {\n        case GameActionTypes.NEXT_TURN:\n          dispatch(nextGameTurn());\n          break;\n        case GameActionTypes.ADD_BUILT_CONNECTION:\n          dispatch(addBuiltConnection(payload.playerId, payload.connectionId));\n          break;\n        case GameActionTypes.ADD_TICKET:\n          dispatch(addTicket(payload.playerId, payload.ticket));\n          break;\n        case GameActionTypes.ADD_HISTORY:\n          dispatch(addHistory(payload.playerId, payload.historyElement));\n          break;\n        case GameActionTypes.ADD_COMPLETED_TICKET:\n          dispatch(addCompletedTicket(payload.playerId, payload.ticket));\n          break;\n        case GameActionTypes.END_TURN:\n          dispatch(setEndTurn(payload));\n          break;\n        default:\n          break;\n      }\n    }));\n    dispatch(wsSubscribeChannel(ServerMessages.STATE_CHANGED, resp => {\n      const state = resp.state;\n      if (state.deck) {\n        dispatch(setDeck(state.deck));\n      }\n    }));\n  }, [dispatch]);\n  const localPlayerTickets = localPlayer.tickets;\n  const allBuiltConnections = useSelector(selectAllBuiltConnections);\n  const localPlayerCards = useSelector(selectLocalPlayerCards);\n  const [showTicketCities, setShowTicketCities] = useState(null);\n  const {\n    currentTicketShow,\n    changeCurrentTicketShow\n  } = useCurrentTicketShow(localPlayerTickets);\n  const {\n    showBuildModal,\n    buildableConnection,\n    changeShowBuildModal\n  } = useBuildModalShow();\n  const {\n    showNotificationModal,\n    notificationMessage,\n    changeShowNotificationModal\n  } = useNotificationModalShow();\n  const [chosenCity, setChosenCity] = useState(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-100 w-100 d-flex flex-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-grow-1 d-flex flex-row mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-bar text-center d-flex flex-column\",\n          children: /*#__PURE__*/_jsxDEV(PlayerIndicatorPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow-1 text-center px-2 d-flex align-items-center\",\n          children: /*#__PURE__*/_jsxDEV(Map, {\n            chosenCity: chosenCity,\n            setChosenCity: city => {\n              if (localPlayer !== currentPlayer || game.gameState !== GameStates.USER_BEGIN && game.gameState !== GameStates.BUILD_LINE) {\n                changeShowNotificationModal(\"Most nem tudsz építeni.\");\n                return;\n              }\n              if (city === chosenCity) {\n                setChosenCity(null);\n                dispatch(setGameState(GameStates.USER_BEGIN));\n              } else if (chosenCity) {\n                const occupiedConnections = allBuiltConnections.flatMap(_ref2 => {\n                  let {\n                    _,\n                    connections\n                  } = _ref2;\n                  return connections;\n                });\n                const connection = Object.values(ticketToRideData.connections).find(connection => connection.fromCity === city && connection.toCity === chosenCity || connection.fromCity === chosenCity && connection.toCity === city);\n                if (connection.elements.length > localPlayer.remainingCars) {\n                  changeShowNotificationModal(\"Nincs elég vagonod.\");\n                  return;\n                }\n                let hasEnoughCards = connection && localPlayerCards.some(_ref3 => {\n                  let {\n                    color,\n                    amount\n                  } = _ref3;\n                  return (connection.color === \"gray\" || color === Colors[connection.color.toUpperCase()] || color === Colors.LOCOMOTIVE) && amount >= connection.elements.length;\n                });\n                if (!hasEnoughCards) {\n                  const locomotives = localPlayerCards.find(card => card.color === Colors.LOCOMOTIVE).amount;\n                  if (connection.color === \"gray\") {\n                    hasEnoughCards = localPlayerCards.some(_ref4 => {\n                      let {\n                        _,\n                        amount\n                      } = _ref4;\n                      return locomotives + amount >= connection.elements.length;\n                    });\n                  } else {\n                    const colorTrains = localPlayerCards.find(card => card.color === Colors[connection.color.toUpperCase()]).amount;\n                    hasEnoughCards = colorTrains + locomotives >= connection.elements.length;\n                  }\n                }\n                if (connection && !occupiedConnections.includes(connection.id) && hasEnoughCards) {\n                  changeShowBuildModal(true, connection.id);\n                } else {\n                  dispatch(setGameState(GameStates.USER_BEGIN));\n                  changeShowNotificationModal(\"Ezt a vonalat nem tudod megépíteni.\");\n                }\n                setChosenCity(null);\n              } else {\n                setChosenCity(city);\n                dispatch(setGameState(GameStates.BUILD_LINE));\n              }\n            },\n            showTicketCities: showTicketCities\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-bar text-center d-flex flex-column align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(PublicCardsPanel, {\n              changeShowNotificationModal: changeShowNotificationModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(DeckPanel, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-auto mb-4\",\n            children: /*#__PURE__*/_jsxDEV(TicketDeckPanel, {\n              setShowTicketCities: setShowTicketCities,\n              changeShowNotificationModal: changeShowNotificationModal\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-bar d-flex flex-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-bar text-center d-flex flex-column\",\n          children: /*#__PURE__*/_jsxDEV(CurrentPlayerTicketPanel, {\n            currentTicketShow: currentTicketShow,\n            changeCurrentTicketShow: changeCurrentTicketShow,\n            setShowTicketCities: setShowTicketCities\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex-grow-1 text-center px-2 col\",\n          children: /*#__PURE__*/_jsxDEV(CurrentPlayerCardsPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"side-bar text-center d-flex flex-column\",\n          children: /*#__PURE__*/_jsxDEV(HistoryPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), showNotificationModal && /*#__PURE__*/_jsxDEV(NotificationModal, {\n      message: notificationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this), showBuildModal && /*#__PURE__*/_jsxDEV(BuildModal, {\n      buildableConnection: buildableConnection,\n      closeModal: () => {\n        changeShowBuildModal(false, -1);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this), game.gameState === GameStates.END_GAME && /*#__PURE__*/_jsxDEV(EndGameModal, {\n      setAppState: setAppState,\n      showTicketCities: showTicketCities,\n      setShowTicketCities: setShowTicketCities\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s4(GamePage, \"nE10M8XsPtuWBurL/d8xsN2wo8I=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useSelector, useSelector, useCurrentTicketShow, useBuildModalShow, useNotificationModalShow];\n});\n_c = GamePage;\nGamePage.propTypes = {};\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Map","ticketToRideData","PlayerIndicatorPanel","PublicCardsPanel","DeckPanel","TicketDeckPanel","CurrentPlayerCardsPanel","HistoryPanel","CurrentPlayerTicketPanel","BuildModal","EndGameModal","useDispatch","useSelector","selectGame","Colors","selectAllBuiltConnections","selectCurrentPlayer","selectLocalPlayer","nextGameTurn","setEndTurn","setGameState","setDeck","selectLocalPlayerCards","NotificationModal","GameStates","wsSubscribeChannel","GameActionTypes","ServerMessages","addBuiltConnection","addCompletedTicket","addHistory","addTicket","useNotificationModalShow","showNotificationModal","setShowNotificationModal","notificationMessage","setNotificationMessage","changeShowNotificationModal","message","setTimeout","useBuildModalShow","showBuildModal","setShowBuildModal","buildableConnection","setBuildableConnection","changeShowBuildModal","show","connectionId","useCurrentTicketShow","localPlayerTickets","currentTicketShow","setCurrentTicketShow","id","changeCurrentTicketShow","changeValue","current","length","GamePage","setAppState","game","currentPlayer","localPlayer","dispatch","ACTION_SENT","resp","payload","action","type","NEXT_TURN","ADD_BUILT_CONNECTION","playerId","ADD_TICKET","ticket","ADD_HISTORY","historyElement","ADD_COMPLETED_TICKET","END_TURN","STATE_CHANGED","state","deck","tickets","allBuiltConnections","localPlayerCards","showTicketCities","setShowTicketCities","chosenCity","setChosenCity","city","gameState","USER_BEGIN","BUILD_LINE","occupiedConnections","flatMap","_","connections","connection","Object","values","find","fromCity","toCity","elements","remainingCars","hasEnoughCards","some","color","amount","toUpperCase","LOCOMOTIVE","locomotives","card","colorTrains","includes","END_GAME","propTypes"],"sources":["C:/Win11/Programming/Other/ticket-to-ride-app/src/views/game/GamePage.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport Map from \"./map/Map\";\r\nimport { ticketToRideData } from \"../../data/ticket-to-ride-data\";\r\nimport PlayerIndicatorPanel from \"./panel/player-indicator/PlayerIndicatorPanel\";\r\nimport PublicCardsPanel from \"./panel/public-cards/PublicCardsPanel\";\r\nimport DeckPanel from \"./panel/deck-panel/DeckPanel\";\r\nimport TicketDeckPanel from \"./panel/ticket-deck-panel/TicketDeckPanel\";\r\nimport CurrentPlayerCardsPanel from \"./panel/current-player-cards-panel/CurrentPlayerCardsPanel\";\r\nimport HistoryPanel from \"./panel/history-panel/HistoryPanel\";\r\nimport CurrentPlayerTicketPanel from \"./panel/current-player-ticket-panel/CurrentPlayerTicketPanel\";\r\nimport BuildModal from \"./BuildModal\";\r\nimport EndGameModal from \"./EndGameModal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectGame } from \"../../state/game/selector\";\r\nimport { Colors } from \"../../domain/colors\";\r\nimport {\r\n  selectAllBuiltConnections,\r\n  selectCurrentPlayer,\r\n  selectLocalPlayer,\r\n} from \"../../state/players/selector\";\r\nimport {\r\n  nextGameTurn,\r\n  setEndTurn,\r\n  setGameState,\r\n} from \"../../state/game/actions\";\r\nimport { setDeck } from \"../../state/deck/actions\";\r\nimport { selectLocalPlayerCards } from \"../../state/deck/selector\";\r\nimport NotificationModal from \"./NotificationModal\";\r\nimport { GameStates } from \"../../domain/game\";\r\nimport { wsSubscribeChannel } from \"../../state/socket/actions\";\r\nimport { GameActionTypes, ServerMessages } from \"../../api/socket\";\r\nimport {\r\n  addBuiltConnection,\r\n  addCompletedTicket,\r\n  addHistory,\r\n  addTicket,\r\n} from \"../../state/players/actions\";\r\n\r\nfunction useNotificationModalShow() {\r\n  const [showNotificationModal, setShowNotificationModal] = useState(false);\r\n  const [notificationMessage, setNotificationMessage] = useState(\"\");\r\n\r\n  const changeShowNotificationModal = (message) => {\r\n    if (showNotificationModal) return;\r\n\r\n    setTimeout(() => {\r\n      setShowNotificationModal(false);\r\n    }, 1000);\r\n    setNotificationMessage(message);\r\n    setShowNotificationModal(true);\r\n  };\r\n  return {\r\n    showNotificationModal,\r\n    notificationMessage,\r\n    changeShowNotificationModal,\r\n  };\r\n}\r\n\r\nfunction useBuildModalShow() {\r\n  const [showBuildModal, setShowBuildModal] = useState(false);\r\n  const [buildableConnection, setBuildableConnection] = useState(-1);\r\n\r\n  const changeShowBuildModal = (show, connectionId) => {\r\n    setBuildableConnection(connectionId);\r\n    setShowBuildModal(show);\r\n  };\r\n\r\n  return { showBuildModal, buildableConnection, changeShowBuildModal };\r\n}\r\n\r\nfunction useCurrentTicketShow(localPlayerTickets) {\r\n  const [currentTicketShow, setCurrentTicketShow] = useState(0);\r\n  const id = useRef(0);\r\n\r\n  const changeCurrentTicketShow = (changeValue) => {\r\n    id.current += changeValue;\r\n\r\n    if (id.current < 0) {\r\n      id.current = localPlayerTickets.length - 1;\r\n    } else if (id.current > localPlayerTickets.length - 1) {\r\n      id.current = 0;\r\n    }\r\n\r\n    setCurrentTicketShow(id.current);\r\n  };\r\n\r\n  return {\r\n    currentTicketShow,\r\n    changeCurrentTicketShow,\r\n  };\r\n}\r\n\r\nfunction GamePage({ setAppState }) {\r\n  const game = useSelector(selectGame);\r\n\r\n  const currentPlayer = useSelector(selectCurrentPlayer);\r\n  const localPlayer = useSelector(selectLocalPlayer);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(\r\n      wsSubscribeChannel(ServerMessages.ACTION_SENT, (resp) => {\r\n        const payload = resp.action.payload;\r\n        switch (resp.action.type) {\r\n          case GameActionTypes.NEXT_TURN:\r\n            dispatch(nextGameTurn());\r\n            break;\r\n          case GameActionTypes.ADD_BUILT_CONNECTION:\r\n            dispatch(\r\n              addBuiltConnection(payload.playerId, payload.connectionId)\r\n            );\r\n            break;\r\n          case GameActionTypes.ADD_TICKET:\r\n            dispatch(addTicket(payload.playerId, payload.ticket));\r\n            break;\r\n          case GameActionTypes.ADD_HISTORY:\r\n            dispatch(addHistory(payload.playerId, payload.historyElement));\r\n            break;\r\n          case GameActionTypes.ADD_COMPLETED_TICKET:\r\n            dispatch(addCompletedTicket(payload.playerId, payload.ticket));\r\n            break;\r\n          case GameActionTypes.END_TURN:\r\n            dispatch(setEndTurn(payload));\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      })\r\n    );\r\n    dispatch(\r\n      wsSubscribeChannel(ServerMessages.STATE_CHANGED, (resp) => {\r\n        const state = resp.state;\r\n        if (state.deck) {\r\n          dispatch(setDeck(state.deck));\r\n        }\r\n      })\r\n    );\r\n  }, [dispatch]);\r\n\r\n  const localPlayerTickets = localPlayer.tickets;\r\n  const allBuiltConnections = useSelector(selectAllBuiltConnections);\r\n  const localPlayerCards = useSelector(selectLocalPlayerCards);\r\n\r\n  const [showTicketCities, setShowTicketCities] = useState(null);\r\n  const { currentTicketShow, changeCurrentTicketShow } = useCurrentTicketShow(\r\n    localPlayerTickets\r\n  );\r\n\r\n  const {\r\n    showBuildModal,\r\n    buildableConnection,\r\n    changeShowBuildModal,\r\n  } = useBuildModalShow();\r\n  const {\r\n    showNotificationModal,\r\n    notificationMessage,\r\n    changeShowNotificationModal,\r\n  } = useNotificationModalShow();\r\n\r\n  const [chosenCity, setChosenCity] = useState(null);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"h-100 w-100 d-flex flex-column\">\r\n        <div className=\"flex-grow-1 d-flex flex-row mt-2\">\r\n          <div className=\"side-bar text-center d-flex flex-column\">\r\n            <PlayerIndicatorPanel />\r\n          </div>\r\n          <div className=\"flex-grow-1 text-center px-2 d-flex align-items-center\">\r\n            <Map\r\n              chosenCity={chosenCity}\r\n              setChosenCity={(city) => {\r\n                if (\r\n                  localPlayer !== currentPlayer ||\r\n                  (game.gameState !== GameStates.USER_BEGIN &&\r\n                    game.gameState !== GameStates.BUILD_LINE)\r\n                ) {\r\n                  changeShowNotificationModal(\"Most nem tudsz építeni.\");\r\n                  return;\r\n                }\r\n                if (city === chosenCity) {\r\n                  setChosenCity(null);\r\n                  dispatch(setGameState(GameStates.USER_BEGIN));\r\n                } else if (chosenCity) {\r\n                  const occupiedConnections = allBuiltConnections.flatMap(\r\n                    ({ _, connections }) => connections\r\n                  );\r\n\r\n                  const connection = Object.values(\r\n                    ticketToRideData.connections\r\n                  ).find(\r\n                    (connection) =>\r\n                      (connection.fromCity === city &&\r\n                        connection.toCity === chosenCity) ||\r\n                      (connection.fromCity === chosenCity &&\r\n                        connection.toCity === city)\r\n                  );\r\n                  if (connection.elements.length > localPlayer.remainingCars) {\r\n                    changeShowNotificationModal(\"Nincs elég vagonod.\");\r\n                    return;\r\n                  }\r\n                  let hasEnoughCards =\r\n                    connection &&\r\n                    localPlayerCards.some(\r\n                      ({ color, amount }) =>\r\n                        (connection.color === \"gray\" ||\r\n                          color === Colors[connection.color.toUpperCase()] ||\r\n                          color === Colors.LOCOMOTIVE) &&\r\n                        amount >= connection.elements.length\r\n                    );\r\n                  if (!hasEnoughCards) {\r\n                    const locomotives = localPlayerCards.find(\r\n                      (card) => card.color === Colors.LOCOMOTIVE\r\n                    ).amount;\r\n\r\n                    if (connection.color === \"gray\") {\r\n                      hasEnoughCards = localPlayerCards.some(\r\n                        ({ _, amount }) =>\r\n                          locomotives + amount >= connection.elements.length\r\n                      );\r\n                    } else {\r\n                      const colorTrains = localPlayerCards.find(\r\n                        (card) =>\r\n                          card.color === Colors[connection.color.toUpperCase()]\r\n                      ).amount;\r\n\r\n                      hasEnoughCards =\r\n                        colorTrains + locomotives >= connection.elements.length;\r\n                    }\r\n                  }\r\n\r\n                  if (\r\n                    connection &&\r\n                    !occupiedConnections.includes(connection.id) &&\r\n                    hasEnoughCards\r\n                  ) {\r\n                    changeShowBuildModal(true, connection.id);\r\n                  } else {\r\n                    dispatch(setGameState(GameStates.USER_BEGIN));\r\n                    changeShowNotificationModal(\r\n                      \"Ezt a vonalat nem tudod megépíteni.\"\r\n                    );\r\n                  }\r\n                  setChosenCity(null);\r\n                } else {\r\n                  setChosenCity(city);\r\n                  dispatch(setGameState(GameStates.BUILD_LINE));\r\n                }\r\n              }}\r\n              showTicketCities={showTicketCities}\r\n            ></Map>\r\n          </div>\r\n          <div className=\"side-bar text-center d-flex flex-column align-items-center\">\r\n            <div>\r\n              <PublicCardsPanel\r\n                changeShowNotificationModal={changeShowNotificationModal}\r\n              />\r\n            </div>\r\n            <div>\r\n              <DeckPanel></DeckPanel>\r\n            </div>\r\n            <div className=\"mt-auto mb-4\">\r\n              <TicketDeckPanel\r\n                setShowTicketCities={setShowTicketCities}\r\n                changeShowNotificationModal={changeShowNotificationModal}\r\n              ></TicketDeckPanel>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-bar d-flex flex-row\">\r\n          <div className=\"side-bar text-center d-flex flex-column\">\r\n            <CurrentPlayerTicketPanel\r\n              currentTicketShow={currentTicketShow}\r\n              changeCurrentTicketShow={changeCurrentTicketShow}\r\n              setShowTicketCities={setShowTicketCities}\r\n            ></CurrentPlayerTicketPanel>\r\n          </div>\r\n          <div className=\"flex-grow-1 text-center px-2 col\">\r\n            <CurrentPlayerCardsPanel />\r\n          </div>\r\n          <div className=\"side-bar text-center d-flex flex-column\">\r\n            <HistoryPanel />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {showNotificationModal && (\r\n        <NotificationModal message={notificationMessage} />\r\n      )}\r\n      {showBuildModal && (\r\n        <BuildModal\r\n          buildableConnection={buildableConnection}\r\n          closeModal={() => {\r\n            changeShowBuildModal(false, -1);\r\n          }}\r\n        ></BuildModal>\r\n      )}\r\n      {game.gameState === GameStates.END_GAME && (\r\n        <EndGameModal\r\n          setAppState={setAppState}\r\n          showTicketCities={showTicketCities}\r\n          setShowTicketCities={setShowTicketCities}\r\n        ></EndGameModal>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nGamePage.propTypes = {};\r\n\r\nexport default GamePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}