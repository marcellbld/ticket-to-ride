{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Win11/Programming/Other/ticket-to-ride-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{ticketToRideData}from\"../data/ticket-to-ride-data\";export function findPathBetweenCities(startCityId,builtConnections){var citiesPI=new Array(Object.values(ticketToRideData.cities).length+1).fill(0);var citiesD=new Array(Object.values(ticketToRideData.cities).length+1).fill(100);var checkedEdges=[];var queue=[];queue.push(startCityId);citiesD[startCityId]=0;while(queue.length>0){var currCity=queue[0];var _iterator=_createForOfIteratorHelper(builtConnections),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var connectionId=_step.value;if(checkedEdges.includes(connectionId))continue;var connection=ticketToRideData.connections[connectionId];if(connection.from===currCity||connection.to===currCity){var from=connection.from===currCity;var cityId=from?connection.to:connection.from;if(citiesD[cityId]===100||citiesD[cityId]<citiesD[currCity]){citiesD[cityId]=citiesD[currCity]+1;citiesPI[cityId]=currCity;queue.push(cityId);}checkedEdges.push(connectionId);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}queue.shift();}return{pi:citiesPI,d:citiesD};}export function hasConnectionBetweenCities(startCityId,endCityId,builtConnections){var _findPathBetweenCitie=findPathBetweenCities(startCityId,builtConnections),pi=_findPathBetweenCitie.pi,d=_findPathBetweenCitie.d;var completed=false;if(d[endCityId]!==100){var city=endCityId;while(city!==0&&city!==startCityId){city=pi[city];}if(city===startCityId){completed=true;}}return completed;}","map":{"version":3,"names":["ticketToRideData","findPathBetweenCities","startCityId","builtConnections","citiesPI","Array","Object","values","cities","length","fill","citiesD","checkedEdges","queue","push","currCity","connectionId","includes","connection","connections","from","to","cityId","shift","pi","d","hasConnectionBetweenCities","endCityId","completed","city"],"sources":["C:/Win11/Programming/Other/ticket-to-ride-app/src/util/pathfinder.js"],"sourcesContent":["import { ticketToRideData } from \"../data/ticket-to-ride-data\";\r\n\r\nexport function findPathBetweenCities(startCityId, builtConnections) {\r\n  const citiesPI = new Array(\r\n    Object.values(ticketToRideData.cities).length + 1\r\n  ).fill(0);\r\n  const citiesD = new Array(\r\n    Object.values(ticketToRideData.cities).length + 1\r\n  ).fill(100);\r\n\r\n  const checkedEdges = [];\r\n  const queue = [];\r\n  queue.push(startCityId);\r\n  citiesD[startCityId] = 0;\r\n\r\n  while (queue.length > 0) {\r\n    const currCity = queue[0];\r\n\r\n    for (let connectionId of builtConnections) {\r\n      if (checkedEdges.includes(connectionId)) continue;\r\n\r\n      const connection = ticketToRideData.connections[connectionId];\r\n\r\n      if (connection.from === currCity || connection.to === currCity) {\r\n        const from = connection.from === currCity;\r\n        const cityId = from ? connection.to : connection.from;\r\n        if (citiesD[cityId] === 100 || citiesD[cityId] < citiesD[currCity]) {\r\n          citiesD[cityId] = citiesD[currCity] + 1;\r\n          citiesPI[cityId] = currCity;\r\n          queue.push(cityId);\r\n        }\r\n\r\n        checkedEdges.push(connectionId);\r\n      }\r\n    }\r\n    queue.shift();\r\n  }\r\n\r\n  return { pi: citiesPI, d: citiesD };\r\n}\r\n\r\nexport function hasConnectionBetweenCities(\r\n  startCityId,\r\n  endCityId,\r\n  builtConnections\r\n) {\r\n  const { pi, d } = findPathBetweenCities(startCityId, builtConnections);\r\n  let completed = false;\r\n  if (d[endCityId] !== 100) {\r\n    let city = endCityId;\r\n    while (city !== 0 && city !== startCityId) {\r\n      city = pi[city];\r\n    }\r\n    if (city === startCityId) {\r\n      completed = true;\r\n    }\r\n  }\r\n\r\n  return completed;\r\n}\r\n"],"mappings":"2JAAA,OAASA,gBAAgB,KAAQ,6BAA6B,CAE9D,MAAO,SAASC,sBAAqB,CAACC,WAAW,CAAEC,gBAAgB,CAAE,CACnE,GAAMC,SAAQ,CAAG,GAAIC,MAAK,CACxBC,MAAM,CAACC,MAAM,CAACP,gBAAgB,CAACQ,MAAM,CAAC,CAACC,MAAM,CAAG,CAAC,CAClD,CAACC,IAAI,CAAC,CAAC,CAAC,CACT,GAAMC,QAAO,CAAG,GAAIN,MAAK,CACvBC,MAAM,CAACC,MAAM,CAACP,gBAAgB,CAACQ,MAAM,CAAC,CAACC,MAAM,CAAG,CAAC,CAClD,CAACC,IAAI,CAAC,GAAG,CAAC,CAEX,GAAME,aAAY,CAAG,EAAE,CACvB,GAAMC,MAAK,CAAG,EAAE,CAChBA,KAAK,CAACC,IAAI,CAACZ,WAAW,CAAC,CACvBS,OAAO,CAACT,WAAW,CAAC,CAAG,CAAC,CAExB,MAAOW,KAAK,CAACJ,MAAM,CAAG,CAAC,CAAE,CACvB,GAAMM,SAAQ,CAAGF,KAAK,CAAC,CAAC,CAAC,CAAC,yCAEDV,gBAAgB,YAAzC,+CAA2C,IAAlCa,aAAY,aACnB,GAAIJ,YAAY,CAACK,QAAQ,CAACD,YAAY,CAAC,CAAE,SAEzC,GAAME,WAAU,CAAGlB,gBAAgB,CAACmB,WAAW,CAACH,YAAY,CAAC,CAE7D,GAAIE,UAAU,CAACE,IAAI,GAAKL,QAAQ,EAAIG,UAAU,CAACG,EAAE,GAAKN,QAAQ,CAAE,CAC9D,GAAMK,KAAI,CAAGF,UAAU,CAACE,IAAI,GAAKL,QAAQ,CACzC,GAAMO,OAAM,CAAGF,IAAI,CAAGF,UAAU,CAACG,EAAE,CAAGH,UAAU,CAACE,IAAI,CACrD,GAAIT,OAAO,CAACW,MAAM,CAAC,GAAK,GAAG,EAAIX,OAAO,CAACW,MAAM,CAAC,CAAGX,OAAO,CAACI,QAAQ,CAAC,CAAE,CAClEJ,OAAO,CAACW,MAAM,CAAC,CAAGX,OAAO,CAACI,QAAQ,CAAC,CAAG,CAAC,CACvCX,QAAQ,CAACkB,MAAM,CAAC,CAAGP,QAAQ,CAC3BF,KAAK,CAACC,IAAI,CAACQ,MAAM,CAAC,CACpB,CAEAV,YAAY,CAACE,IAAI,CAACE,YAAY,CAAC,CACjC,CACF,CAAC,qDACDH,KAAK,CAACU,KAAK,EAAE,CACf,CAEA,MAAO,CAAEC,EAAE,CAAEpB,QAAQ,CAAEqB,CAAC,CAAEd,OAAQ,CAAC,CACrC,CAEA,MAAO,SAASe,2BAA0B,CACxCxB,WAAW,CACXyB,SAAS,CACTxB,gBAAgB,CAChB,CACA,0BAAkBF,qBAAqB,CAACC,WAAW,CAAEC,gBAAgB,CAAC,CAA9DqB,EAAE,uBAAFA,EAAE,CAAEC,CAAC,uBAADA,CAAC,CACb,GAAIG,UAAS,CAAG,KAAK,CACrB,GAAIH,CAAC,CAACE,SAAS,CAAC,GAAK,GAAG,CAAE,CACxB,GAAIE,KAAI,CAAGF,SAAS,CACpB,MAAOE,IAAI,GAAK,CAAC,EAAIA,IAAI,GAAK3B,WAAW,CAAE,CACzC2B,IAAI,CAAGL,EAAE,CAACK,IAAI,CAAC,CACjB,CACA,GAAIA,IAAI,GAAK3B,WAAW,CAAE,CACxB0B,SAAS,CAAG,IAAI,CAClB,CACF,CAEA,MAAOA,UAAS,CAClB"},"metadata":{},"sourceType":"module"}